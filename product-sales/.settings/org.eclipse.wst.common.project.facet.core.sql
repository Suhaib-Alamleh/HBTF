
  CREATE TABLE "SAKREGIS3"."SAKREG_REQUEST_TRX" 
   (	"ID" NUMBER(38,0) NOT NULL ENABLE, 
	"REQUEST_NO" NUMBER(38,0) NOT NULL ENABLE, 
	"REQUEST_DATE" DATE DEFAULT sysdate, 
	"PAYMENT_SOURCE_ID" NUMBER(4,0) NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(200 CHAR), 
	"UPDATED_DATE" DATE DEFAULT sysdate, 
	"SMS_CELL_NO" VARCHAR2(20 CHAR), 
	"NOTIFICATION_EMAIL" VARCHAR2(100 CHAR), 
	"SAKREG_SERVICE_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"SAKREG_REQUEST_STATUS_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"PAY_STATUS" NUMBER(2,0), 
	"PAY_EXEMPTED" NUMBER(1,0), 
	"PAY_EXEMPTED_REASON_ID" NUMBER(3,0) DEFAULT NULL, 
	"PAY_EXEMPTED_REASON_TXT" VARCHAR2(300 CHAR), 
	"SAK_USER_ID" NUMBER(38,0) DEFAULT NULL, 
	"SYNC_FLAG" NUMBER(1,0) DEFAULT 0, 
	"SOURCE" VARCHAR2(5 BYTE) DEFAULT 'SAK', 
	"MASTER_REQUEST_ID" NUMBER(38,0), 
	"ORGANIZATION_UNIT_ID" NUMBER DEFAULT 101, 
	"FINISHED_DATE" DATE, 
	"CASE_NO" VARCHAR2(50 CHAR), 
	"CASE_DATE" DATE, 
	"AUTOMATICALLY_EXPIRES" NUMBER(1,0), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"EFFECTIVE_PERIOD" NUMBER(4,0), 
	"PERIOD_UNIT" NUMBER(1,0), 
	"OWNERSHIP_BLOCKER" NUMBER(1,0), 
	"CONTRACT_AMOUNT" NUMBER, 
	"TXT_SUMMARY" VARCHAR2(200 CHAR), 
	"PARTY_ID" NUMBER(*,0), 
	"LIEN_TYPE_ID" NUMBER(4,0), 
	"REF_LIEN_CAT_ID" NUMBER(1,0), 
	"USER_NO" NUMBER, 
	"TRANS_SAM_CNT" NUMBER, 
	"STATUS_REASON" VARCHAR2(1 BYTE), 
	"MORT_AMOUNT" NUMBER, 
	"DOC_NO" VARCHAR2(100 CHAR), 
	"DOC_DATE" DATE, 
	"PREMIUM_VALUE" NUMBER(7,2), 
	"PREMIUM_CNT" NUMBER(4,0), 
	"TRX_JSON" CLOB, 
	"HEARALLPARTIES" NUMBER(1,0), 
	"COMMIT_SAK_USER" VARCHAR2(400 CHAR), 
	"TRX_XML" "SYS"."XMLTYPE" , 
	"REJECTION_REASON_ID" NUMBER, 
	"REJECTION_REASON_TXT" VARCHAR2(4000 BYTE), 
	"APPROVAL_EMPLOYEE" NUMBER, 
	"FILENET_CASEID" VARCHAR2(100 BYTE), 
	"PD_GIS_IDENTICAL" NUMBER(1,0), 
	"GIS_DATA_SYNC" NUMBER(1,0), 
	"GIS_DATA_SAVED" NUMBER(1,0), 
	"READY_FOR_GIS" NUMBER(1,0), 
	"DAMAGED_TITLE_DEED_RECEIVED" NUMBER(1,0), 
	"PROPERTY_DOCUMENT_RECEIVED" NUMBER(1,0), 
	"INSTALLED_ON_PAPER_MAPS" NUMBER(1,0), 
	"SAKREG_SUB_SERVICE_ID" NUMBER, 
	"CONTRACT_LISTENED" NUMBER(1,0), 
	"CANCEL_USUFRUCT_REASON_ID" NUMBER DEFAULT NULL, 
	"REQUEST_ID_MODIFIED" NUMBER, 
	"INSPECTION_DONE" NUMBER(1,0), 
	"INITIAL_PD_SAVED" NUMBER(1,0), 
	"DELAY_REASON" VARCHAR2(200 CHAR), 
	"OWNERSHIP_MANIFESTATIONS_MSG" VARCHAR2(200 CHAR), 
	"OWNERSHIP_MANIFESTATIONS_ID" NUMBER, 
	"WATERMARKED" NUMBER(1,0) DEFAULT 0, 
	"NO_NEED_TO_PRINT_PLAN" NUMBER(1,0), 
	"IS_DEPOSIT_FEES_PAID" NUMBER(1,0), 
	"DEPOSIT_PAY_EXEMPTED_REASON_ID" NUMBER(3,0) DEFAULT NULL, 
	"DEPOSIT_PAY_EXEMPTED_REASON" VARCHAR2(300 CHAR), 
	"DEPOSIT_PAY_EXEMPTED" NUMBER(1,0), 
	 CONSTRAINT "SAKREG_REQUEST_TRX_NO_UK" UNIQUE ("REQUEST_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS"  ENABLE, 
	 CONSTRAINT "SAKREG_REQUEST_TRX_ADHERE" CHECK (HEARALLPARTIES in (0,1)) ENABLE, 
	 CONSTRAINT "SAKREG_REQUEST_TRX_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS"  ENABLE, 
	 CONSTRAINT "SAKREG_REQUEST_TRX_REJECT_FK" FOREIGN KEY ("REJECTION_REASON_ID")
	  REFERENCES "SAKREGIS3"."REF_REJECTION_REASON" ("REJECTION_REASON_ID") ENABLE, 
	 CONSTRAINT "SAKREG_REQ_REQ_STATUS_FK" FOREIGN KEY ("SAKREG_REQUEST_STATUS_ID")
	  REFERENCES "SAKREGIS3"."SAKREG_REQUEST_STATUS" ("ID") ENABLE, 
	 CONSTRAINT "SAKREG_RQST_PYMNT_EXMP_RESN_FK" FOREIGN KEY ("PAY_EXEMPTED_REASON_ID")
	  REFERENCES "SAKREGIS3"."PAYMENT_EXEMPTION_REASON" ("ID") ENABLE, 
	 CONSTRAINT "SAKREG_REQ_SOURCE_FK" FOREIGN KEY ("PAYMENT_SOURCE_ID")
	  REFERENCES "SAKREGIS3"."REQUEST_SOURCE" ("REQUEST_SOURCE_ID") ENABLE, 
	 CONSTRAINT "SAKREG_REQ_LIEN_CAT" FOREIGN KEY ("REF_LIEN_CAT_ID")
	  REFERENCES "SAKREGIS3"."REF_LIEN_CAT" ("REF_LIEN_CAT_ID") ENABLE, 
	 CONSTRAINT "SAKREG_REQUE_SAKREG_REQUE_FK" FOREIGN KEY ("MASTER_REQUEST_ID")
	  REFERENCES "SAKREGIS3"."SAKREG_REQUEST" ("ID") ENABLE, 
	 CONSTRAINT "SAKREG_REQUEST_TRX_SERVICE_FK" FOREIGN KEY ("SAKREG_SERVICE_ID")
	  REFERENCES "SAKREGIS3"."SAKREG_SERVICE" ("ID") ENABLE, 
	 CONSTRAINT "SAKREG_REQUEST_TRX_OWNERSHIP" FOREIGN KEY ("OWNERSHIP_MANIFESTATIONS_ID")
	  REFERENCES "SAKREGIS3"."OWNERSHIP_MANIFESTATIONS" ("ID") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" 
 LOB ("TRX_JSON") STORE AS BASICFILE (
  TABLESPACE "TBLS_REGIS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 XMLTYPE COLUMN "TRX_XML" STORE AS SECUREFILE BINARY XML (
  TABLESPACE "TBLS_REGIS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ALLOW NONSCHEMA DISALLOW ANYSCHEMA ;

   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."ID" IS 'مسلسل';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."REQUEST_TRX_NO" IS 'يستخدم مسلسل موحد على النظامين';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."REQUEST_TRX_DATE" IS 'تاريخ الطلب';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PAYMENT_SOURCE_ID" IS 'مصدر/طريقه الدفع';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."UPDATED_BY" IS 'اخر شخص قام بعديل السجل';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."UPDATED_DATE" IS 'تاريخ اخر تعديل';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SMS_CELL_NO" IS 'رقم الجوال المربوط بالمعاملةX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."NOTIFICATION_EMAIL" IS 'البريد الالكترونى المربوط بالمعاملةX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SAKREG_SERVICE_ID" IS 'كود المعاملة';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SAKREG_REQUEST_TRX_STATUS_ID" IS 'حالة المعاملة';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PAY_STATUS" IS 'سبب حالة المعاملةX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PAY_EXEMPTED" IS 'معفى ؟X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PAY_EXEMPTED_REASON_ID" IS 'كود سبب الاعفاء X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PAY_EXEMPTED_REASON_TXT" IS '  سبب الاعفاء X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SAK_USER_ID" IS 'كود المستخدم';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SYNC_FLAG" IS 'المزامنة';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SOURCE" IS 'مصدر المعاملة';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."MASTER_REQUEST_ID" IS 'رقم الطلب الرئيسي ان وجد 
يتخدم فى حالة الطلبات المركبة';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."ORGANIZATION_UNIT_ID" IS 'المكتب';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."FINISHED_DATE" IS 'تاريخ الطلب';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."CASE_NO" IS 'رقم القضية';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."CASE_DATE" IS 'تاريخ القضية';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."AUTOMATICALLY_EXPIRES" IS 'ينتهي تلقائياX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."START_DATE" IS 'تاريخ بدء فعالية المعاملة خصوصا ف الحجز و الهبةX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."END_DATE" IS 'تاريخ نهاية تاثير المعاملةX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."EFFECTIVE_PERIOD" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PERIOD_UNIT" IS 'وحدات الفتره (يوم شهر سنة)X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."OWNERSHIP_BLOCKER" IS 'يمنع التصرف فى الملكية
0 لا
1 يمنعX';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."CONTRACT_AMOUNT" IS 'قيمه المعامله ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."LIEN_TYPE_ID" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."REF_LIEN_CAT_ID" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."USER_NO" IS 'Updated by ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."STATUS_REASON" IS 'سبب حالة المعاملة';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."MORT_AMOUNT" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PREMIUM_VALUE" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."PREMIUM_CNT" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."HEARALLPARTIES" IS 'X';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."COMMIT_SAK_USER" IS 'من قام بتثبيت النتائج';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."TRX_XML" IS 'saved jason as xml ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."APPROVAL_EMPLOYEE" IS 'مكان وجود الكتاب  صندوق البريد ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."INSTALLED_ON_PAPER_MAPS" IS '1 -> تم التثبيت علي الخرائط الورقيه
';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."SAKREG_SUB_SERVICE_ID" IS 'كود الخدمه الفرعي ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."CONTRACT_LISTENED" IS 'تم الاستماع';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."REQUEST_ID_MODIFIED" IS 'modified by / canceled by request id ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."INSPECTION_DONE" IS 'تمت المعاينه';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."INITIAL_PD_SAVED" IS 'تم اعداد المخطط الاولي ';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."DELAY_REASON" IS 'سبب عدم التقديم في المدة الزمنيه';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."OWNERSHIP_MANIFESTATIONS_MSG" IS 'مظاهر الحيازة في حالة اخري';
   COMMENT ON COLUMN "SAKREGIS3"."SAKREG_REQUEST_TRX"."OWNERSHIP_MANIFESTATIONS_ID" IS 'مظاهر الحيازة';
   COMMENT ON TABLE "SAKREGIS3"."SAKREG_REQUEST_TRX"  IS 'الطلب الرئيسي (المعاملة)';

  CREATE INDEX "SAKREGIS3"."IDX$$_2F700015" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("ORGANIZATION_UNIT_ID", "ID", "SAKREG_SERVICE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."IDX$$_41930002" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("SAKREG_SERVICE_ID", "ID", "PARTY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."IDX$$_96C30001" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("SAKREG_REQUEST_STATUS_ID", "ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."REG_REQ_UPDTDBY_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("UPDATED_BY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQUEST_TRX_IDX$$_1D4D0006" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("SAK_USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQUEST_TRX_IDX$$_4F3F0015" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("SAKREG_SERVICE_ID", TO_CHAR("FINISHED_DATE",'yyyymmdd'), "FINISHED_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE UNIQUE INDEX "SAKREGIS3"."SAKREG_REQUEST_TRX_PK" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQUEST_TRX_REJECT_FK_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("REJECTION_REASON_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQUEST_TRX_SERVICE_FK_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("SAKREG_SERVICE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQUEST_TRX_SERVICE__DATE" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("FINISHED_DATE", "SAKREG_SERVICE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQUE_SAKREG_REQUE__IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("MASTER_REQUEST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQ_LIEN_CAT_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("REF_LIEN_CAT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE UNIQUE INDEX "SAKREGIS3"."SAKREG_REQ_NO_PK2" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("ID", "REQUEST_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQ_REQ_STATUS_FK_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("SAKREG_REQUEST_STATUS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_REQ_SOURCE_FK_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("PAYMENT_SOURCE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE INDEX "SAKREGIS3"."SAKREG_RQST_PYMNT_EXMP_RES_IDX" ON "SAKREGIS3"."SAKREG_REQUEST_TRX" ("PAY_EXEMPTED_REASON_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBLS_REGIS" ;

  CREATE OR REPLACE TRIGGER "SAKREGIS3"."TRGR_BFR_URL_SAKREG_REQUEST_TRX" 
  BEFORE INSERT OR UPDATE ON SAKREG_REQUEST_TRX
  FOR EACH ROW
BEGIN
  IF LOWER(USER) <> 'synchronizer' THEN
    :NEW.SYNC_FLAG := 0;
    :NEW.SOURCE    := 'SAK';
    IF ((:NEW.CONTRACT_AMOUNT = 0 OR :NEW.CONTRACT_AMOUNT IS NULL) AND
       (:OLD.CONTRACT_AMOUNT IS NOT NULL OR :OLD.CONTRACT_AMOUNT != 0)) THEN
      :NEW.CONTRACT_AMOUNT := :OLD.CONTRACT_AMOUNT;
    END IF;
  
    IF (:OLD.REQUEST_NO IS NOT NULL OR :OLD.REQUEST_NO >0) THEN
      :NEW.REQUEST_NO := :OLD.REQUEST_NO;
    END IF;
  
  END IF;
END;


/
ALTER TRIGGER "SAKREGIS3"."TRGR_BFR_URL_SAKREG_REQUEST_TRX" ENABLE;

  CREATE OR REPLACE TRIGGER "SAKREGIS3"."REQUEST_TRX_NO_TRIGGER" 
BEFORE INSERT or update
ON SAKREG_REQUEST_TRX
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
 
BEGIN
  
        :NEW.REQUEST_NO :=:new.id;
  

END;


/
ALTER TRIGGER "SAKREGIS3"."REQUEST_TRX_NO_TRIGGER" ENABLE;

  CREATE OR REPLACE TRIGGER "SAKREGIS3"."UNHOLD_PARCELS" 
  after update
  on SAKREG_REQUEST_TRX 
  for each row
declare
  
begin
  if :new.sakreg_request_status_id in (5,2,19,15,17,18,11) then
  request_inout_data.unhold_parcel(p_req_id => :new.id);
  end if;
end UNHOLD_PARCELS;


/
ALTER TRIGGER "SAKREGIS3"."UNHOLD_PARCELS" ENABLE;

  CREATE OR REPLACE TRIGGER "SAKREGIS3"."RAISE_ERROR_IF_STATUS_9" 
   BEFORE INSERT OR UPDATE OF SAKREG_REQUEST_STATUS_ID
   ON SAKREGIS3.SAKREG_REQUEST_TRX
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
BEGIN
   /*this trigger ment to hadle un managed changes in request_status_ID*/
   IF NVL (:new.request_id_modified, 0) = 0
   THEN
      IF (    :OLD.SAKREG_REQUEST_STATUS_ID = 7
          AND :NEW.SAKREG_REQUEST_STATUS_ID NOT IN (7,
                                                    2,
                                                    18,
                                                    37))
      THEN
         :NEW.SAKREG_REQUEST_STATUS_ID := 7;
      END IF;


      IF (    :OLD.SAKREG_REQUEST_STATUS_ID = 2
          AND :NEW.SAKREG_REQUEST_STATUS_ID NOT IN (19, 23, 37))
      THEN
         :NEW.SAKREG_REQUEST_STATUS_ID := 2;
      END IF;

      IF (    :OLD.SAKREG_REQUEST_STATUS_ID = 19
          AND :NEW.SAKREG_REQUEST_STATUS_ID != 35)
      THEN
         :NEW.SAKREG_REQUEST_STATUS_ID := 19;
      END IF;

      IF (    :OLD.SAKREG_REQUEST_STATUS_ID = 35
          AND :NEW.SAKREG_REQUEST_STATUS_ID != 36)
      THEN
         :NEW.SAKREG_REQUEST_STATUS_ID := 35;
      END IF;

      IF (    :OLD.SAKREG_REQUEST_STATUS_ID = 36
          AND :NEW.SAKREG_REQUEST_STATUS_ID != 36)
      THEN
         :NEW.SAKREG_REQUEST_STATUS_ID := 36;
      END IF;
   END IF;
END;
/
ALTER TRIGGER "SAKREGIS3"."RAISE_ERROR_IF_STATUS_9" ENABLE;

  CREATE OR REPLACE TRIGGER "SAKREGIS3"."SAKREG_REQUEST_TRX_AUDTRIG" 
   AFTER INSERT OR UPDATE OR DELETE
   ON  SAKREGIS3.SAKREG_REQUEST_TRX
   FOR EACH ROW
DECLARE
   V_USER         VARCHAR2 (30) := NULL;
   V_IP_ADDRESS   VARCHAR2 (30) := NULL;
   V_OS_USER      VARCHAR2 (30) := NULL;
   V_TERMINAL     VARCHAR2 (30) := NULL;
   V_ACTION       VARCHAR2 (15);
BEGIN
   SELECT SYS_CONTEXT ('USERENV', 'session_user') SESSION_USER
     INTO V_USER
     FROM DUAL;

   SELECT SYS_CONTEXT ('USERENV', 'IP_ADDRESS') SESSION_USER
     INTO V_IP_ADDRESS
     FROM DUAL;

   SELECT SYS_CONTEXT ('USERENV', 'OS_USER') SESSION_USER
     INTO V_OS_USER
     FROM DUAL;

   SELECT SYS_CONTEXT ('USERENV', 'TERMINAL') SESSION_USER
     INTO V_TERMINAL
     FROM DUAL;

   IF INSERTING
   THEN
      V_ACTION := 'INSERT';

      INSERT INTO SAKREG_REQUEST_TRX_AUD (REJECTION_REASON_TXT,
                                      REJECTION_REASON_ID,
                                      APPROVAL_EMPLOYEE,
                                      PARTY_ID,
                                      PERIOD_UNIT,
                                      REF_LIEN_CAT_ID,
                                      START_DATE,
                                      TXT_SUMMARY,
                                      CONTRACT_AMOUNT,
                                      DOC_DATE,
                                      DOC_NO,
                                      HEARALLPARTIES,
                                      PAY_STATUS,
                                      PREMIUM_CNT,
                                      PREMIUM_VALUE,
                                      TRANS_SAM_CNT,
                                      TRX_JSON,
                                      TRX_XML,
                                      COMMIT_SAK_USER,
                                      ID,
                                      REQUEST_NO,
                                      REQUEST_DATE,
                                      PAYMENT_SOURCE_ID,
                                      UPDATED_BY,
                                      UPDATED_DATE,
                                      SMS_CELL_NO,
                                      NOTIFICATION_EMAIL,
                                      SAKREG_SERVICE_ID,
                                      SAKREG_REQUEST_STATUS_ID,
                                      STATUS_REASON,
                                      PAY_EXEMPTED,
                                      PAY_EXEMPTED_REASON_ID,
                                      PAY_EXEMPTED_REASON_TXT,
                                      SAK_USER_ID,
                                      SYNC_FLAG,
                                      SOURCE,
                                      ORGANIZATION_UNIT_ID,
                                      USER_NO,
                                      AUTOMATICALLY_EXPIRES,
                                      CASE_DATE,
                                      CASE_NO,
                                      EFFECTIVE_PERIOD,
                                      END_DATE,
                                      FINISHED_DATE,
                                      LIEN_TYPE_ID,
                                      MASTER_REQUEST_ID,
                                      MORT_AMOUNT,
                                      OWNERSHIP_BLOCKER,
                                      AUDIT_ACTION,
                                      AUDIT_BY,
                                      AUDIT_AT,
                                      IP_ADDRESS,
                                      OS_USER,
                                      TERMINAL)
           VALUES (:NEW.REJECTION_REASON_TXT,
                   :NEW.REJECTION_REASON_ID,
                   :NEW.APPROVAL_EMPLOYEE,
                   :NEW.PARTY_ID,
                   :NEW.PERIOD_UNIT,
                   :NEW.REF_LIEN_CAT_ID,
                   :NEW.START_DATE,
                   :NEW.TXT_SUMMARY,
                   :NEW.CONTRACT_AMOUNT,
                   :NEW.DOC_DATE,
                   :NEW.DOC_NO,
                   :NEW.HEARALLPARTIES,
                   :NEW.PAY_STATUS,
                   :NEW.PREMIUM_CNT,
                   :NEW.PREMIUM_VALUE,
                   :NEW.TRANS_SAM_CNT,
                   :NEW.TRX_JSON,
                   :NEW.TRX_XML,
                   :NEW.COMMIT_SAK_USER,
                   :NEW.ID,
                   :NEW.REQUEST_NO,
                   :NEW.REQUEST_DATE,
                   :NEW.PAYMENT_SOURCE_ID,
                   :NEW.UPDATED_BY,
                   :NEW.UPDATED_DATE,
                   :NEW.SMS_CELL_NO,
                   :NEW.NOTIFICATION_EMAIL,
                   :NEW.SAKREG_SERVICE_ID,
                   :NEW.SAKREG_REQUEST_STATUS_ID,
                   :NEW.STATUS_REASON,
                   :NEW.PAY_EXEMPTED,
                   :NEW.PAY_EXEMPTED_REASON_ID,
                   :NEW.PAY_EXEMPTED_REASON_TXT,
                   :NEW.SAK_USER_ID,
                   :NEW.SYNC_FLAG,
                   :NEW.SOURCE,
                   :NEW.ORGANIZATION_UNIT_ID,
                   :NEW.USER_NO,
                   :NEW.AUTOMATICALLY_EXPIRES,
                   :NEW.CASE_DATE,
                   :NEW.CASE_NO,
                   :NEW.EFFECTIVE_PERIOD,
                   :NEW.END_DATE,
                   :NEW.FINISHED_DATE,
                   :NEW.LIEN_TYPE_ID,
                   :NEW.MASTER_REQUEST_ID,
                   :NEW.MORT_AMOUNT,
                   :NEW.OWNERSHIP_BLOCKER,
                   'I',
                   V_USER,
                   SYSDATE,
                   V_IP_ADDRESS,
                   V_OS_USER,
                   V_TERMINAL);
   ELSIF UPDATING
   THEN
      V_ACTION := 'UPDATE';

      IF    (   (:OLD.REJECTION_REASON_TXT <> :NEW.REJECTION_REASON_TXT)
             OR (    :OLD.REJECTION_REASON_TXT IS NULL
                 AND :NEW.REJECTION_REASON_TXT IS NOT NULL)
             OR (    :OLD.REJECTION_REASON_TXT IS NOT NULL
                 AND :NEW.REJECTION_REASON_TXT IS NULL))
         OR (   (:OLD.REJECTION_REASON_ID <> :NEW.REJECTION_REASON_ID)
             OR (    :OLD.REJECTION_REASON_ID IS NULL
                 AND :NEW.REJECTION_REASON_ID IS NOT NULL)
             OR (    :OLD.REJECTION_REASON_ID IS NOT NULL
                 AND :NEW.REJECTION_REASON_ID IS NULL))
         OR (   (:OLD.APPROVAL_EMPLOYEE <> :NEW.APPROVAL_EMPLOYEE)
             OR (    :OLD.APPROVAL_EMPLOYEE IS NULL
                 AND :NEW.APPROVAL_EMPLOYEE IS NOT NULL)
             OR (    :OLD.APPROVAL_EMPLOYEE IS NOT NULL
                 AND :NEW.APPROVAL_EMPLOYEE IS NULL))
         OR (   (:OLD.PARTY_ID <> :NEW.PARTY_ID)
             OR (:OLD.PARTY_ID IS NULL AND :NEW.PARTY_ID IS NOT NULL)
             OR (:OLD.PARTY_ID IS NOT NULL AND :NEW.PARTY_ID IS NULL))
         OR (   (:OLD.PERIOD_UNIT <> :NEW.PERIOD_UNIT)
             OR (:OLD.PERIOD_UNIT IS NULL AND :NEW.PERIOD_UNIT IS NOT NULL)
             OR (:OLD.PERIOD_UNIT IS NOT NULL AND :NEW.PERIOD_UNIT IS NULL))
         OR (   (:OLD.REF_LIEN_CAT_ID <> :NEW.REF_LIEN_CAT_ID)
             OR (    :OLD.REF_LIEN_CAT_ID IS NULL
                 AND :NEW.REF_LIEN_CAT_ID IS NOT NULL)
             OR (    :OLD.REF_LIEN_CAT_ID IS NOT NULL
                 AND :NEW.REF_LIEN_CAT_ID IS NULL))
         OR (   (:OLD.START_DATE <> :NEW.START_DATE)
             OR (:OLD.START_DATE IS NULL AND :NEW.START_DATE IS NOT NULL)
             OR (:OLD.START_DATE IS NOT NULL AND :NEW.START_DATE IS NULL))
         OR (   (:OLD.TXT_SUMMARY <> :NEW.TXT_SUMMARY)
             OR (:OLD.TXT_SUMMARY IS NULL AND :NEW.TXT_SUMMARY IS NOT NULL)
             OR (:OLD.TXT_SUMMARY IS NOT NULL AND :NEW.TXT_SUMMARY IS NULL))
         OR (   (:OLD.CONTRACT_AMOUNT <> :NEW.CONTRACT_AMOUNT)
             OR (    :OLD.CONTRACT_AMOUNT IS NULL
                 AND :NEW.CONTRACT_AMOUNT IS NOT NULL)
             OR (    :OLD.CONTRACT_AMOUNT IS NOT NULL
                 AND :NEW.CONTRACT_AMOUNT IS NULL))
         OR (   (:OLD.DOC_DATE <> :NEW.DOC_DATE)
             OR (:OLD.DOC_DATE IS NULL AND :NEW.DOC_DATE IS NOT NULL)
             OR (:OLD.DOC_DATE IS NOT NULL AND :NEW.DOC_DATE IS NULL))
         OR (   (:OLD.DOC_NO <> :NEW.DOC_NO)
             OR (:OLD.DOC_NO IS NULL AND :NEW.DOC_NO IS NOT NULL)
             OR (:OLD.DOC_NO IS NOT NULL AND :NEW.DOC_NO IS NULL))
         OR (   (:OLD.HEARALLPARTIES <> :NEW.HEARALLPARTIES)
             OR (    :OLD.HEARALLPARTIES IS NULL
                 AND :NEW.HEARALLPARTIES IS NOT NULL)
             OR (    :OLD.HEARALLPARTIES IS NOT NULL
                 AND :NEW.HEARALLPARTIES IS NULL))
         OR (   (:OLD.PAY_STATUS <> :NEW.PAY_STATUS)
             OR (:OLD.PAY_STATUS IS NULL AND :NEW.PAY_STATUS IS NOT NULL)
             OR (:OLD.PAY_STATUS IS NOT NULL AND :NEW.PAY_STATUS IS NULL))
         OR (   (:OLD.PREMIUM_CNT <> :NEW.PREMIUM_CNT)
             OR (:OLD.PREMIUM_CNT IS NULL AND :NEW.PREMIUM_CNT IS NOT NULL)
             OR (:OLD.PREMIUM_CNT IS NOT NULL AND :NEW.PREMIUM_CNT IS NULL))
         OR (   (:OLD.PREMIUM_VALUE <> :NEW.PREMIUM_VALUE)
             OR (    :OLD.PREMIUM_VALUE IS NULL
                 AND :NEW.PREMIUM_VALUE IS NOT NULL)
             OR (    :OLD.PREMIUM_VALUE IS NOT NULL
                 AND :NEW.PREMIUM_VALUE IS NULL))
         OR (   (:OLD.TRANS_SAM_CNT <> :NEW.TRANS_SAM_CNT)
             OR (    :OLD.TRANS_SAM_CNT IS NULL
                 AND :NEW.TRANS_SAM_CNT IS NOT NULL)
             OR (    :OLD.TRANS_SAM_CNT IS NOT NULL
                 AND :NEW.TRANS_SAM_CNT IS NULL))
         OR (   (:OLD.TRX_JSON <> :NEW.TRX_JSON)
             OR (:OLD.TRX_JSON IS NULL AND :NEW.TRX_JSON IS NOT NULL)
             OR (:OLD.TRX_JSON IS NOT NULL AND :NEW.TRX_JSON IS NULL))
         OR (   (:OLD.COMMIT_SAK_USER <> :NEW.COMMIT_SAK_USER)
             OR (    :OLD.COMMIT_SAK_USER IS NULL
                 AND :NEW.COMMIT_SAK_USER IS NOT NULL)
             OR (    :OLD.COMMIT_SAK_USER IS NOT NULL
                 AND :NEW.COMMIT_SAK_USER IS NULL))
         OR (   (:OLD.ID <> :NEW.ID)
             OR (:OLD.ID IS NULL AND :NEW.ID IS NOT NULL)
             OR (:OLD.ID IS NOT NULL AND :NEW.ID IS NULL))
         OR (   (:OLD.REQUEST_NO <> :NEW.REQUEST_NO)
             OR (:OLD.REQUEST_NO IS NULL AND :NEW.REQUEST_NO IS NOT NULL)
             OR (:OLD.REQUEST_NO IS NOT NULL AND :NEW.REQUEST_NO IS NULL))
         OR (   (:OLD.REQUEST_DATE <> :NEW.REQUEST_DATE)
             OR (:OLD.REQUEST_DATE IS NULL AND :NEW.REQUEST_DATE IS NOT NULL)
             OR (:OLD.REQUEST_DATE IS NOT NULL AND :NEW.REQUEST_DATE IS NULL))
         OR (   (:OLD.PAYMENT_SOURCE_ID <> :NEW.PAYMENT_SOURCE_ID)
             OR (    :OLD.PAYMENT_SOURCE_ID IS NULL
                 AND :NEW.PAYMENT_SOURCE_ID IS NOT NULL)
             OR (    :OLD.PAYMENT_SOURCE_ID IS NOT NULL
                 AND :NEW.PAYMENT_SOURCE_ID IS NULL))
         OR (   (:OLD.UPDATED_BY <> :NEW.UPDATED_BY)
             OR (:OLD.UPDATED_BY IS NULL AND :NEW.UPDATED_BY IS NOT NULL)
             OR (:OLD.UPDATED_BY IS NOT NULL AND :NEW.UPDATED_BY IS NULL))
         OR (   (:OLD.UPDATED_DATE <> :NEW.UPDATED_DATE)
             OR (:OLD.UPDATED_DATE IS NULL AND :NEW.UPDATED_DATE IS NOT NULL)
             OR (:OLD.UPDATED_DATE IS NOT NULL AND :NEW.UPDATED_DATE IS NULL))
         OR (   (:OLD.SMS_CELL_NO <> :NEW.SMS_CELL_NO)
             OR (:OLD.SMS_CELL_NO IS NULL AND :NEW.SMS_CELL_NO IS NOT NULL)
             OR (:OLD.SMS_CELL_NO IS NOT NULL AND :NEW.SMS_CELL_NO IS NULL))
         OR (   (:OLD.NOTIFICATION_EMAIL <> :NEW.NOTIFICATION_EMAIL)
             OR (    :OLD.NOTIFICATION_EMAIL IS NULL
                 AND :NEW.NOTIFICATION_EMAIL IS NOT NULL)
             OR (    :OLD.NOTIFICATION_EMAIL IS NOT NULL
                 AND :NEW.NOTIFICATION_EMAIL IS NULL))
         OR (   (:OLD.SAKREG_SERVICE_ID <> :NEW.SAKREG_SERVICE_ID)
             OR (    :OLD.SAKREG_SERVICE_ID IS NULL
                 AND :NEW.SAKREG_SERVICE_ID IS NOT NULL)
             OR (    :OLD.SAKREG_SERVICE_ID IS NOT NULL
                 AND :NEW.SAKREG_SERVICE_ID IS NULL))
         OR (   (:OLD.SAKREG_REQUEST_STATUS_ID <>
                    :NEW.SAKREG_REQUEST_STATUS_ID)
             OR (    :OLD.SAKREG_REQUEST_STATUS_ID IS NULL
                 AND :NEW.SAKREG_REQUEST_STATUS_ID IS NOT NULL)
             OR (    :OLD.SAKREG_REQUEST_STATUS_ID IS NOT NULL
                 AND :NEW.SAKREG_REQUEST_STATUS_ID IS NULL))
         OR (   (:OLD.STATUS_REASON <> :NEW.STATUS_REASON)
             OR (    :OLD.STATUS_REASON IS NULL
                 AND :NEW.STATUS_REASON IS NOT NULL)
             OR (    :OLD.STATUS_REASON IS NOT NULL
                 AND :NEW.STATUS_REASON IS NULL))
         OR (   (:OLD.PAY_EXEMPTED <> :NEW.PAY_EXEMPTED)
             OR (:OLD.PAY_EXEMPTED IS NULL AND :NEW.PAY_EXEMPTED IS NOT NULL)
             OR (:OLD.PAY_EXEMPTED IS NOT NULL AND :NEW.PAY_EXEMPTED IS NULL))
         OR (   (:OLD.PAY_EXEMPTED_REASON_ID <> :NEW.PAY_EXEMPTED_REASON_ID)
             OR (    :OLD.PAY_EXEMPTED_REASON_ID IS NULL
                 AND :NEW.PAY_EXEMPTED_REASON_ID IS NOT NULL)
             OR (    :OLD.PAY_EXEMPTED_REASON_ID IS NOT NULL
                 AND :NEW.PAY_EXEMPTED_REASON_ID IS NULL))
         OR (   (:OLD.PAY_EXEMPTED_REASON_TXT <> :NEW.PAY_EXEMPTED_REASON_TXT)
             OR (    :OLD.PAY_EXEMPTED_REASON_TXT IS NULL
                 AND :NEW.PAY_EXEMPTED_REASON_TXT IS NOT NULL)
             OR (    :OLD.PAY_EXEMPTED_REASON_TXT IS NOT NULL
                 AND :NEW.PAY_EXEMPTED_REASON_TXT IS NULL))
         OR (   (:OLD.SAK_USER_ID <> :NEW.SAK_USER_ID)
             OR (:OLD.SAK_USER_ID IS NULL AND :NEW.SAK_USER_ID IS NOT NULL)
             OR (:OLD.SAK_USER_ID IS NOT NULL AND :NEW.SAK_USER_ID IS NULL))
         OR (   (:OLD.SYNC_FLAG <> :NEW.SYNC_FLAG)
             OR (:OLD.SYNC_FLAG IS NULL AND :NEW.SYNC_FLAG IS NOT NULL)
             OR (:OLD.SYNC_FLAG IS NOT NULL AND :NEW.SYNC_FLAG IS NULL))
         OR (   (:OLD.SOURCE <> :NEW.SOURCE)
             OR (:OLD.SOURCE IS NULL AND :NEW.SOURCE IS NOT NULL)
             OR (:OLD.SOURCE IS NOT NULL AND :NEW.SOURCE IS NULL))
         OR (   (:OLD.ORGANIZATION_UNIT_ID <> :NEW.ORGANIZATION_UNIT_ID)
             OR (    :OLD.ORGANIZATION_UNIT_ID IS NULL
                 AND :NEW.ORGANIZATION_UNIT_ID IS NOT NULL)
             OR (    :OLD.ORGANIZATION_UNIT_ID IS NOT NULL
                 AND :NEW.ORGANIZATION_UNIT_ID IS NULL))
         OR (   (:OLD.USER_NO <> :NEW.USER_NO)
             OR (:OLD.USER_NO IS NULL AND :NEW.USER_NO IS NOT NULL)
             OR (:OLD.USER_NO IS NOT NULL AND :NEW.USER_NO IS NULL))
         OR (   (:OLD.AUTOMATICALLY_EXPIRES <> :NEW.AUTOMATICALLY_EXPIRES)
             OR (    :OLD.AUTOMATICALLY_EXPIRES IS NULL
                 AND :NEW.AUTOMATICALLY_EXPIRES IS NOT NULL)
             OR (    :OLD.AUTOMATICALLY_EXPIRES IS NOT NULL
                 AND :NEW.AUTOMATICALLY_EXPIRES IS NULL))
         OR (   (:OLD.CASE_DATE <> :NEW.CASE_DATE)
             OR (:OLD.CASE_DATE IS NULL AND :NEW.CASE_DATE IS NOT NULL)
             OR (:OLD.CASE_DATE IS NOT NULL AND :NEW.CASE_DATE IS NULL))
         OR (   (:OLD.CASE_NO <> :NEW.CASE_NO)
             OR (:OLD.CASE_NO IS NULL AND :NEW.CASE_NO IS NOT NULL)
             OR (:OLD.CASE_NO IS NOT NULL AND :NEW.CASE_NO IS NULL))
         OR (   (:OLD.EFFECTIVE_PERIOD <> :NEW.EFFECTIVE_PERIOD)
             OR (    :OLD.EFFECTIVE_PERIOD IS NULL
                 AND :NEW.EFFECTIVE_PERIOD IS NOT NULL)
             OR (    :OLD.EFFECTIVE_PERIOD IS NOT NULL
                 AND :NEW.EFFECTIVE_PERIOD IS NULL))
         OR (   (:OLD.END_DATE <> :NEW.END_DATE)
             OR (:OLD.END_DATE IS NULL AND :NEW.END_DATE IS NOT NULL)
             OR (:OLD.END_DATE IS NOT NULL AND :NEW.END_DATE IS NULL))
         OR (   (:OLD.FINISHED_DATE <> :NEW.FINISHED_DATE)
             OR (    :OLD.FINISHED_DATE IS NULL
                 AND :NEW.FINISHED_DATE IS NOT NULL)
             OR (    :OLD.FINISHED_DATE IS NOT NULL
                 AND :NEW.FINISHED_DATE IS NULL))
         OR (   (:OLD.LIEN_TYPE_ID <> :NEW.LIEN_TYPE_ID)
             OR (:OLD.LIEN_TYPE_ID IS NULL AND :NEW.LIEN_TYPE_ID IS NOT NULL)
             OR (:OLD.LIEN_TYPE_ID IS NOT NULL AND :NEW.LIEN_TYPE_ID IS NULL))
         OR (   (:OLD.MASTER_REQUEST_ID <> :NEW.MASTER_REQUEST_ID)
             OR (    :OLD.MASTER_REQUEST_ID IS NULL
                 AND :NEW.MASTER_REQUEST_ID IS NOT NULL)
             OR (    :OLD.MASTER_REQUEST_ID IS NOT NULL
                 AND :NEW.MASTER_REQUEST_ID IS NULL))
         OR (   (:OLD.MORT_AMOUNT <> :NEW.MORT_AMOUNT)
             OR (:OLD.MORT_AMOUNT IS NULL AND :NEW.MORT_AMOUNT IS NOT NULL)
             OR (:OLD.MORT_AMOUNT IS NOT NULL AND :NEW.MORT_AMOUNT IS NULL))
         OR (   (:OLD.OWNERSHIP_BLOCKER <> :NEW.OWNERSHIP_BLOCKER)
             OR (    :OLD.OWNERSHIP_BLOCKER IS NULL
                 AND :NEW.OWNERSHIP_BLOCKER IS NOT NULL)
             OR (    :OLD.OWNERSHIP_BLOCKER IS NOT NULL
                 AND :NEW.OWNERSHIP_BLOCKER IS NULL))
      THEN
         INSERT INTO SAKREG_REQUEST_AUD (REJECTION_REASON_TXT,
                                         REJECTION_REASON_ID,
                                         APPROVAL_EMPLOYEE,
                                         PARTY_ID,
                                         PERIOD_UNIT,
                                         REF_LIEN_CAT_ID,
                                         START_DATE,
                                         TXT_SUMMARY,
                                         CONTRACT_AMOUNT,
                                         DOC_DATE,
                                         DOC_NO,
                                         HEARALLPARTIES,
                                         PAY_STATUS,
                                         PREMIUM_CNT,
                                         PREMIUM_VALUE,
                                         TRANS_SAM_CNT,
                                         TRX_JSON,
                                         TRX_XML,
                                         COMMIT_SAK_USER,
                                         ID,
                                         REQUEST_NO,
                                         REQUEST_DATE,
                                         PAYMENT_SOURCE_ID,
                                         UPDATED_BY,
                                         UPDATED_DATE,
                                         SMS_CELL_NO,
                                         NOTIFICATION_EMAIL,
                                         SAKREG_SERVICE_ID,
                                         SAKREG_REQUEST_STATUS_ID,
                                         STATUS_REASON,
                                         PAY_EXEMPTED,
                                         PAY_EXEMPTED_REASON_ID,
                                         PAY_EXEMPTED_REASON_TXT,
                                         SAK_USER_ID,
                                         SYNC_FLAG,
                                         SOURCE,
                                         ORGANIZATION_UNIT_ID,
                                         USER_NO,
                                         AUTOMATICALLY_EXPIRES,
                                         CASE_DATE,
                                         CASE_NO,
                                         EFFECTIVE_PERIOD,
                                         END_DATE,
                                         FINISHED_DATE,
                                         LIEN_TYPE_ID,
                                         MASTER_REQUEST_ID,
                                         MORT_AMOUNT,
                                         OWNERSHIP_BLOCKER,
                                         AUDIT_ACTION,
                                         AUDIT_BY,
                                         AUDIT_AT,
                                         IP_ADDRESS,
                                         OS_USER,
                                         TERMINAL)
              VALUES (:NEW.REJECTION_REASON_TXT,
                      :NEW.REJECTION_REASON_ID,
                      :NEW.APPROVAL_EMPLOYEE,
                      :NEW.PARTY_ID,
                      :NEW.PERIOD_UNIT,
                      :NEW.REF_LIEN_CAT_ID,
                      :NEW.START_DATE,
                      :NEW.TXT_SUMMARY,
                      :NEW.CONTRACT_AMOUNT,
                      :NEW.DOC_DATE,
                      :NEW.DOC_NO,
                      :NEW.HEARALLPARTIES,
                      :NEW.PAY_STATUS,
                      :NEW.PREMIUM_CNT,
                      :NEW.PREMIUM_VALUE,
                      :NEW.TRANS_SAM_CNT,
                      :NEW.TRX_JSON,
                      :NEW.TRX_XML,
                      :NEW.COMMIT_SAK_USER,
                      :NEW.ID,
                      :NEW.REQUEST_NO,
                      :NEW.REQUEST_DATE,
                      :NEW.PAYMENT_SOURCE_ID,
                      :NEW.UPDATED_BY,
                      :NEW.UPDATED_DATE,
                      :NEW.SMS_CELL_NO,
                      :NEW.NOTIFICATION_EMAIL,
                      :NEW.SAKREG_SERVICE_ID,
                      :NEW.SAKREG_REQUEST_STATUS_ID,
                      :NEW.STATUS_REASON,
                      :NEW.PAY_EXEMPTED,
                      :NEW.PAY_EXEMPTED_REASON_ID,
                      :NEW.PAY_EXEMPTED_REASON_TXT,
                      :NEW.SAK_USER_ID,
                      :NEW.SYNC_FLAG,
                      :NEW.SOURCE,
                      :NEW.ORGANIZATION_UNIT_ID,
                      :NEW.USER_NO,
                      :NEW.AUTOMATICALLY_EXPIRES,
                      :NEW.CASE_DATE,
                      :NEW.CASE_NO,
                      :NEW.EFFECTIVE_PERIOD,
                      :NEW.END_DATE,
                      :NEW.FINISHED_DATE,
                      :NEW.LIEN_TYPE_ID,
                      :NEW.MASTER_REQUEST_ID,
                      :NEW.MORT_AMOUNT,
                      :NEW.OWNERSHIP_BLOCKER,
                      'U',
                      V_USER,
                      SYSDATE,
                      V_IP_ADDRESS,
                      V_OS_USER,
                      V_TERMINAL);
      END IF;
   ELSIF DELETING
   THEN
      V_ACTION := 'DELETING';

      INSERT INTO SAKREG_REQUEST_AUD (REJECTION_REASON_TXT,
                                      REJECTION_REASON_ID,
                                      APPROVAL_EMPLOYEE,
                                      PARTY_ID,
                                      PERIOD_UNIT,
                                      REF_LIEN_CAT_ID,
                                      START_DATE,
                                      TXT_SUMMARY,
                                      CONTRACT_AMOUNT,
                                      DOC_DATE,
                                      DOC_NO,
                                      HEARALLPARTIES,
                                      PAY_STATUS,
                                      PREMIUM_CNT,
                                      PREMIUM_VALUE,
                                      TRANS_SAM_CNT,
                                      TRX_JSON,
                                      TRX_XML,
                                      COMMIT_SAK_USER,
                                      ID,
                                      REQUEST_NO,
                                      REQUEST_DATE,
                                      PAYMENT_SOURCE_ID,
                                      UPDATED_BY,
                                      UPDATED_DATE,
                                      SMS_CELL_NO,
                                      NOTIFICATION_EMAIL,
                                      SAKREG_SERVICE_ID,
                                      SAKREG_REQUEST_STATUS_ID,
                                      STATUS_REASON,
                                      PAY_EXEMPTED,
                                      PAY_EXEMPTED_REASON_ID,
                                      PAY_EXEMPTED_REASON_TXT,
                                      SAK_USER_ID,
                                      SYNC_FLAG,
                                      SOURCE,
                                      ORGANIZATION_UNIT_ID,
                                      USER_NO,
                                      AUTOMATICALLY_EXPIRES,
                                      CASE_DATE,
                                      CASE_NO,
                                      EFFECTIVE_PERIOD,
                                      END_DATE,
                                      FINISHED_DATE,
                                      LIEN_TYPE_ID,
                                      MASTER_REQUEST_ID,
                                      MORT_AMOUNT,
                                      OWNERSHIP_BLOCKER,
                                      AUDIT_ACTION,
                                      AUDIT_BY,
                                      AUDIT_AT,
                                      IP_ADDRESS,
                                      OS_USER,
                                      TERMINAL)
           VALUES (:OLD.REJECTION_REASON_TXT,
                   :OLD.REJECTION_REASON_ID,
                   :OLD.APPROVAL_EMPLOYEE,
                   :OLD.PARTY_ID,
                   :OLD.PERIOD_UNIT,
                   :OLD.REF_LIEN_CAT_ID,
                   :OLD.START_DATE,
                   :OLD.TXT_SUMMARY,
                   :OLD.CONTRACT_AMOUNT,
                   :OLD.DOC_DATE,
                   :OLD.DOC_NO,
                   :OLD.HEARALLPARTIES,
                   :OLD.PAY_STATUS,
                   :OLD.PREMIUM_CNT,
                   :OLD.PREMIUM_VALUE,
                   :OLD.TRANS_SAM_CNT,
                   :OLD.TRX_JSON,
                   :OLD.TRX_XML,
                   :OLD.COMMIT_SAK_USER,
                   :OLD.ID,
                   :OLD.REQUEST_NO,
                   :OLD.REQUEST_DATE,
                   :OLD.PAYMENT_SOURCE_ID,
                   :OLD.UPDATED_BY,
                   :OLD.UPDATED_DATE,
                   :OLD.SMS_CELL_NO,
                   :OLD.NOTIFICATION_EMAIL,
                   :OLD.SAKREG_SERVICE_ID,
                   :OLD.SAKREG_REQUEST_STATUS_ID,
                   :OLD.STATUS_REASON,
                   :OLD.PAY_EXEMPTED,
                   :OLD.PAY_EXEMPTED_REASON_ID,
                   :OLD.PAY_EXEMPTED_REASON_TXT,
                   :OLD.SAK_USER_ID,
                   :OLD.SYNC_FLAG,
                   :OLD.SOURCE,
                   :OLD.ORGANIZATION_UNIT_ID,
                   :OLD.USER_NO,
                   :OLD.AUTOMATICALLY_EXPIRES,
                   :OLD.CASE_DATE,
                   :OLD.CASE_NO,
                   :OLD.EFFECTIVE_PERIOD,
                   :OLD.END_DATE,
                   :OLD.FINISHED_DATE,
                   :OLD.LIEN_TYPE_ID,
                   :OLD.MASTER_REQUEST_ID,
                   :OLD.MORT_AMOUNT,
                   :OLD.OWNERSHIP_BLOCKER,
                   'D',
                   V_USER,
                   SYSDATE,
                   V_IP_ADDRESS,
                   V_OS_USER,
                   V_TERMINAL);
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      NULL;
END;
/
ALTER TRIGGER "SAKREGIS3"."SAKREG_REQUEST_AUDTRIG" ENABLE;
